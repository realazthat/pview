"""
Converts XML generated by [pdf2xml](https://sourceforge.net/projects/pdf2xml/)
to JSON usable by this project.


"""




import xml.dom.minidom as minidom
import json



def handleToken(token):
    
    jtoken = {}
    jtoken['text'] = []
    
    
    for child in token.childNodes:
        if child.nodeName == '#text':
            jtoken['text'] += [child.nodeValue]
    
    
    
    jtoken['text'] = ''.join(jtoken['text'])
    
    
    for i in range(token.attributes.length):
        attr = token.attributes.item(i)
            
        jtoken[attr.name] = attr.value
    
    return jtoken

def handleText(text):
    
    jtext = {}
    
    jtext['tokens'] = jtokens = []
    
    for child in text.childNodes:
        
        if child.nodeName == 'TOKEN':
            jtoken = handleToken(child)
            jtokens += [jtoken]
        else:
            assert False
    
    
    for i in range(text.attributes.length):
        attr = text.attributes.item(i)
        
        jtext[attr.name] = attr.value
    
    return jtext

def handleBlock(block):
    
    jblock = {}
    jblock['texts'] = jtexts = []
    
    for child in block.childNodes:
        
        if child.nodeName == 'TEXT':
            jtext = handleText(child)
            jtexts += [jtext]
        else:
            assert False
    
    
    for i in range(block.attributes.length):
        attr = block.attributes.item(i)
        
        jblock[attr.name] = attr.value
    
    return jblock

def handlePage(page):
    
    jpage = {}
    jpage['blocks'] = jblocks = []
    
    for child in page.childNodes:
        
        name = child.nodeName
        
        if name == 'MEDIABOX' or name == 'CROPBOX':
            continue
        elif name == 'BLEEDBOX' or name == 'ARTBOX':
            continue
        elif name == 'TRIMBOX':
            continue
        elif name == 'BLOCK':
            jblock = handleBlock(child)
            jblocks += [jblock]
        else:
            assert False
    
    for i in range(page.attributes.length):
        attr = page.attributes.item(i)
        
        jpage[attr.name] = attr.value
    
    return jpage
    
def handleDocument(document):
    
    for child in document.childNodes:
        
        if child.nodeName == 'METADATA':
            continue
        elif child.nodeName == 'PAGE':
            return handlePage(child)
        else:
            assert False

    
    

def pdf2xmltojson(fp):
    dom1 = minidom.parse(fp)

    result = {}

    for child in dom1.childNodes:
        
        if child.nodeName == 'DOCUMENT':
            result = handleDocument(child)

    return result


def pdf2jsontojson(fp):
    
    pdfjson = json.load(fp=fp)
    
    raise
    
    

def sandbox_xmltojson():
    
    path = '/dump/Dropbox/dump/projects/peerXive/docs/www.cs.ru.nl/aHR0cDovL3d3dy5jcy5ydS5ubC9+ZnJlZWsvbWl6YXIvbWl6bWFuLnBkZg==/1.xml'

    with open(path,'r') as fp:
        
        
        data = pdfxmltojson(fp)
        
        print json.dumps(data,indent=4)
        




if __name__ == "__main__":
    sandbox_xmltojson()

